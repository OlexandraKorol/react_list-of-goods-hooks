{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReverse","setIsReverse","NONE","sortType","setSortType","goods","isReversed","visibleGoods","ALPHABET","sort","good1","good2","localeCompare","LENGTH","length","reverse","getReorderedGoods","className","type","classNames","onClick","prev","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,4EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAsCE,IAAME,EAAgB,WAC3B,MAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAgCF,mBAASH,EAASM,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAEMC,EApCD,SACLA,EACAF,EACAG,GAEA,IAAMC,EAAY,YAAOF,GAEzB,OAAQF,GACN,KAAKP,EAASY,SACZD,EAAaE,MAAK,SAACC,EAAeC,GAChC,OAAOD,EAAME,cAAcD,MAE7B,MAEF,KAAKf,EAASiB,OACZN,EAAaE,MAAK,SAACC,EAAeC,GAChC,OAAOD,EAAMI,OAASH,EAAMG,UAIhC,KAAKlB,EAASM,MAShB,OAJII,GACFC,EAAaQ,UAGRR,EAOOS,CAAkBnB,EAAiBM,EAAUH,GAM3D,OACE,sBAAKiB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBAAkB,CAAE,WAAYhB,IAAaP,EAASY,WAExDY,QAAS,kBAAMhB,EAAYR,EAASY,WALtC,iCAUA,wBACEU,KAAK,SACLD,UAAWE,IACT,oBAAqB,CAAE,WAAYhB,IAAaP,EAASiB,SAE3DO,QAAS,kBAAMhB,EAAYR,EAASiB,SALtC,4BAUA,wBACEK,KAAK,SACLD,UAAWE,IACT,oBAAqB,CAAE,YAAanB,IAEtCoB,QAAS,kBAAMnB,GAAa,SAACoB,GAAD,OAAWA,MALzC,sBAUErB,GAAaG,IAAaP,EAASM,OAEjC,wBACEgB,KAAK,SACLD,UAAU,4BACVG,QA3Ca,WACvBnB,GAAa,GACbG,EAAYR,EAASM,OAsCb,sBAUN,8BACE,6BACGG,EAAMiB,KAAI,SAACC,GAAD,OACT,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,cChHnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.acbff87b.chunk.js","sourcesContent":["import { useState } from 'react';\nimport './App.scss';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.css';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nexport function getReorderedGoods(\n  goods: string[],\n  sortType: SortType,\n  isReversed: boolean,\n) {\n  const visibleGoods = [...goods];\n\n  switch (sortType) {\n    case SortType.ALPHABET:\n      visibleGoods.sort((good1: string, good2: string) => {\n        return good1.localeCompare(good2);\n      });\n      break;\n\n    case SortType.LENGTH:\n      visibleGoods.sort((good1: string, good2: string) => {\n        return good1.length - good2.length;\n      });\n      break;\n\n    case SortType.NONE:\n    default:\n      break;\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReverse, setIsReverse] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const goods = getReorderedGoods(goodsFromServer, sortType, isReverse);\n  const resetSortFilters = () => {\n    setIsReverse(false);\n    setSortType(SortType.NONE);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-info', { 'is-light': sortType !== SortType.ALPHABET },\n          )}\n          onClick={() => setSortType(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-success', { 'is-light': sortType !== SortType.LENGTH },\n          )}\n          onClick={() => setSortType(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-warning', { 'is-light': !isReverse },\n          )}\n          onClick={() => setIsReverse((prev) => !prev)}\n        >\n          Reverse\n        </button>\n\n        {(isReverse || sortType !== SortType.NONE)\n          && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={resetSortFilters}\n            >\n              Reset\n            </button>\n          )}\n      </div>\n\n      <div>\n        <ul>\n          {goods.map((good) => (\n            <li\n              key={good}\n              data-cy=\"Good\"\n            >\n              {good}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}